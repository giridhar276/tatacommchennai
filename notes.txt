*** Everything in python is object ***
*** Every object contains set of methods ***


objects
------

number
------
number can be integer or octal or hexa or float

aval = 34
bval = 34.4

string
-----
string can be defined in single or double or triple quotes

aname = 'python programming'
bname = "scala language"
cname = """java programming"""


list ( array in C )
-----
list contains set of elements
Elements can be set of numbers or set of strings or any combination
list elements are defined in []

alist = [10,20,30,40]
blist = ["unix","scala","hadoop"]
clist = [10,20,"spark","hadoop",40]


tuple ( READ ONLY)
-----
tuple contains set of elements
Elements can be set of numbers or set of strings or any combination
tuple elements are defined in ()
***** Once tuple is defined ... elements inside tuple cannot be modified

atup = (10,20,30)
btup = ("oracle","mysql","hadoop")
ctup = (10,20,"mysql",40)



dictionary
----------
dictionary contains elements in the form of keys and values.
dictionary elements are defined in {}.
In dictionary, keys are always UNIQUE

syntax :    object = { key:value , key:value , key:value , key:value .... }
example:      book = {"chap1":10 ,"chap2":20 ,"chap3":30}
           numbers = {1:2,3:4,5:6}

set
----
set is group of UNIQUE elements of same TYPE

aset = {10,10,20,30,20}
print(aset)   # 10 20 30
bset = {30,40,50}






commenting in python
--------------------

single line comment  (#) : 
-------------------


multi line comment:  All the lines defined in between ''' and ''' are ignored
------------------

'''
all
these
lines
are 
commented
'''


methods & functions
-----------------

methods are object specific
- string methods are different to list methods
- all the methods are accessed with . operator


functions
----------
- functions are common for all the objects ( print is used to display list,string,tuple,dict)
                                             len is used to display the length of string,list,tuple


How to display all the builtin functions
-------------------------------------------

In the console

dir(__builtins__)   --------------------> will display all the list of exception names and functions

frequently used functions
-------------------------
print()
range()      : display the range of numbers
len()        : display the length of the object
input()      : capture input from the keyboard
type()       : display the type of object
isinstance() : to validate the type of object
max()        :  max([1020,400,40])      # 1020
min()        :  min([1020,400,40])      # 40
sum()        :  sum([1020,400,40])      # 1460
help()       
dir()
open()      :  opening the file
conversion functions
--------------------
int()
float()
str()
list()
tuple()
dict()
set()








statements
------------

conditional statements
---------------------
if
if-else
if-elif-elif-elif....... else


control statements ( iterations)(repeating for n times)
----------------
for
while


jump statements
-----------------
break   ( to terminate the loop)
continue ( skip the current iteration and move on to the next iteration) 




syntax of simple if
---------------------
if cond:
   #statements

synax of if-else
-------------------
if cond:
    #statements
else:
    #statements

syntax of if-elif-elif-elif...... else
----------------------------------------
if cond:
    #statements
elif cond:
    #statements
elif cond:
    #statements
elif cond:
    #statements
else:
    #statement










operators
----------
arithmetic operators : + - * % /
relational operators : <   <=   >    >=   ==   !=
 
                       if val < 10 :
                       if name == "python":
                       if name != "linux":

assignment operators ( ++ and -- are NOT allowed in python )
-----------------------
val = 10
val +=10  (or) val = val + 1
val -=10  (or) val = val - 1

logical operators :   and     or  not
-----------------
                      if len(name) > 0  and name.isupper() :         ( both should be true)
                      if val > 100 or val < 10 :

special operators:    in   ( used to check for existence )      
-----------------     as   ( used in libraries and exception handling)

                     if "python" in "python programming":
 			# statemeents

                     if 10 in [10,20,30,40]

                    


classification of objects
-------------------------


mutable objects
--------------
list
dictionary
set

immutable objects
----------------
number
string
tuple


file handling
--------------

working with flat files ( csv txt conf log ... )
--------------------------------------------------


opening the file
----------------
syntax :     object = open(filename, mode )
example :      fobj = open("clients.txt","r")     # opening in read mode

	       fobj = open("clients.txt","w")     # opening in write mode
	       case1: If the file is not existing .. file will be created
               case2: If the file is already existing... it overwrites the file

	       fobj = open("clients.txt","a")     # opening in append mode
	       case1: If the file is not existing .. file will be created
               case2: If the file is already existing... it appends the data at the end of the file


closing the file
----------------
fobj.close()


different ways of reading the file
-----------------------------------
- reading line by line
- reading the whole file in list format
- using csv library




working with third party files ( xls xlsx pdf doc docx mp4 .... )

















exception handling
-------------------
basically there are 2 types of errors

1. syntax error
2. runtime error

handling the exception in runtime is known as
exception handling

blocks used in exception handling
----------------------------------
try
except
else ( optional)
finally ( optional)

library (or) package 
---------------------
Every library contains set of methods defined by someone else.
every library is accessed with keyword import

Eg: import urrlib.request

importing all the methods from library
-------------------------------------
import math
print(math.cos(2))
print(math.tan(3))

importing required methods ONLY  ( . is NOT required since we are importing required methods ONLY )
-------------------------------
from math import tan,floor
print(tan(2))
print(floor(45.5))

importing library with alias name
-----------------------------
import math as m
print(m.floor(34.4))
print(m.ceil(56.9))



types of libraries
------------------

builtin libraries
-----------------
builtin libraries are installed with python itself which are generally used by everyone ( os, time, logging, zipping... )


third party libraries
---------------------
Depending on the requirement( interacting with cloud , database , excel operations ..) developer has to install the third party library from www.pypi.org


How to install the third party library
-------------------------------------

- installing with pip tool    ( pip install cx_Oracle)
-------------------------
open command prompt or the console and type the below command
pip install cx_Oracle

- installing manually
--------------------
check for the required library and download the library from www.pypi.org
extract and nagivate to the path
open command prompt and type the below
command  :    python setup.py install





frequently used builtin libraries
-------------------------------

os       : OS related methods like listing files,deleting
sys      : python system config information
sysconfig: python system config information
time     : working with date and time
datetime : working with date and time
random   : working with random numbers
zipfile  : create/extract/display the zip files
rarfile  : create/extract/display the tar files
tarfile  : create/extract/display the tar files
smtplib  : sending emails from smtp server
getpass  : shadowing the password
xml      : working with xml files
json     : working with json files
csv      : working with csv files
shutil   : copy/move/delete directory 
collections: performing dictionary operations
sqlite3  : python's default database
urllib   : reading/downloading/accessing web page
calendar : display calendar
decimal  : working more on fractional values
filecmp  : comparing files and directories
ftplib   : perfomring ftp operations
ipaddress: validate ip address
re       :  grep + sed + awk in linux
socket   :  networking programming
telnetlib:  interacting with remote servers













cx_Oracle --------> library for working with oracle
pymysql    -------> library for working with mysql
pymongo    -------> library for working with mongo DB


database operations
--------------------	
display all the existing databases:
----------------------------------
show databases ;

creating your database
---------------------
create database tcl;
show databases;

accessing your database
-----------------------
use tcl ;

display all the tables
----------------------
show tables ;   ( will be empty initially)

create table
------------
create table realestate ( street varchar(100) ,  city varchar(100) ) ;

inserting records
-----------------
insert into realestate values( '101 MG Road','chennai');
insert into realestate values('101 Mount Road', 'Hyderabad') ;

displaying all the records
-------------------------
select * from realestate;

decribe your table
------------------
desc realestate;










function (or) definition (or) subroutine
--------------------------------------------
function is simply set of lines defined for the reusability purpose.
Function is defined once time and can be called for multiple times.


types of functions
------------------
- builtin functions  (    dir(__builtins__) )


- user defined functions
------------------------

passing arguments
----------------
fixed arguments
default arguments
variable length arguments



python with web ( reading the data from web ) ( web scraping)
---------------

Every web page contains some html data.

pip install requests      ------------------> downloading the raw data ( html ,json ... ) from web
pip install beautifulsoup4 -----------------> display the output in the meaning format ( with proper alignment )




excelwrite.py   -----------------> excelwrite.exe

1) auto-py-to-exe( third party library .. need to instal first )
2) py2exe        ( default with python )



third party libraries
-----------------------


networking
---------
ftplib
pysftp 
paramiko   ( connecting to linux  <--> linux , windows <--> linux using SSH )
netmiko    ( interacting with routers,switches )


image processing
------------------
pillow
opencv

machine learning
------------------
numpy
scipy
matplotlib
scikit-learn


zipping/extracing
----------------
zipfile
tarfile
rarfile













































 

